// <auto-generated />
using System;
using KidsQuiz.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KidsQuiz.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250617111937_AddQuestionBank")]
    partial class AddQuestionBank
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KidsQuiz.Data.Models.Kid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DynamicProperties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kids");
                });

            modelBuilder.Entity("KidsQuiz.Data.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrectAnswerIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AudioUrl = "",
                            CorrectAnswerIndex = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(144),
                            DifficultyLevel = 0,
                            Explanation = "2 + 3 = 5",
                            ImageUrl = "",
                            Options = "[\"4\",\"5\",\"6\",\"7\"]",
                            Points = 10,
                            QuizId = 1,
                            Text = "What is 2 + 3?"
                        },
                        new
                        {
                            Id = 2,
                            AudioUrl = "",
                            CorrectAnswerIndex = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(149),
                            DifficultyLevel = 0,
                            Explanation = "5 - 2 = 3",
                            ImageUrl = "",
                            Options = "[\"2\",\"3\",\"4\",\"5\"]",
                            Points = 10,
                            QuizId = 1,
                            Text = "What is 5 - 2?"
                        },
                        new
                        {
                            Id = 3,
                            AudioUrl = "",
                            CorrectAnswerIndex = 2,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(152),
                            DifficultyLevel = 1,
                            Explanation = "4 × 2 = 8",
                            ImageUrl = "",
                            Options = "[\"6\",\"7\",\"8\",\"9\"]",
                            Points = 15,
                            QuizId = 1,
                            Text = "What is 4 × 2?"
                        },
                        new
                        {
                            Id = 4,
                            AudioUrl = "",
                            CorrectAnswerIndex = 0,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(220),
                            DifficultyLevel = 0,
                            Explanation = "Plants need both water and sunlight to grow properly",
                            ImageUrl = "",
                            Options = "[\"Water and sunlight\",\"Only water\",\"Only sunlight\",\"Neither water nor sunlight\"]",
                            Points = 10,
                            QuizId = 2,
                            Text = "What do plants need to grow?"
                        },
                        new
                        {
                            Id = 5,
                            AudioUrl = "",
                            CorrectAnswerIndex = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(226),
                            DifficultyLevel = 1,
                            Explanation = "Mercury is the closest planet to the Sun in our solar system",
                            ImageUrl = "",
                            Options = "[\"Venus\",\"Mercury\",\"Mars\",\"Earth\"]",
                            Points = 15,
                            QuizId = 2,
                            Text = "What is the closest planet to the Sun?"
                        },
                        new
                        {
                            Id = 6,
                            AudioUrl = "",
                            CorrectAnswerIndex = 2,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(292),
                            DifficultyLevel = 0,
                            Explanation = "A noun is a person, place, or thing. 'Dog' is a thing, so it's a noun.",
                            ImageUrl = "",
                            Options = "[\"Run\",\"Happy\",\"Dog\",\"Quickly\"]",
                            Points = 10,
                            QuizId = 3,
                            Text = "Which word is a noun?"
                        },
                        new
                        {
                            Id = 7,
                            AudioUrl = "",
                            CorrectAnswerIndex = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(461),
                            DifficultyLevel = 0,
                            Explanation = "The opposite of 'hot' is 'cold'",
                            ImageUrl = "",
                            Options = "[\"Warm\",\"Cold\",\"Cool\",\"Wet\"]",
                            Points = 10,
                            QuizId = 3,
                            Text = "What is the opposite of 'hot'?"
                        },
                        new
                        {
                            Id = 8,
                            AudioUrl = "",
                            CorrectAnswerIndex = 0,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(470),
                            DifficultyLevel = 1,
                            Explanation = "The correct sentence is 'I am going to the park' because it uses the correct present continuous tense.",
                            ImageUrl = "",
                            Options = "[\"I am going to the park\",\"I going to the park\",\"I goes to the park\",\"I go to the park yesterday\"]",
                            Points = 15,
                            QuizId = 3,
                            Text = "Which sentence is correct?"
                        },
                        new
                        {
                            Id = 9,
                            AudioUrl = "",
                            CorrectAnswerIndex = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(535),
                            DifficultyLevel = 1,
                            Explanation = "12 × 8 = 96",
                            ImageUrl = "",
                            Options = "[\"86\",\"96\",\"106\",\"116\"]",
                            Points = 15,
                            QuizId = 4,
                            Text = "What is 12 × 8?"
                        },
                        new
                        {
                            Id = 10,
                            AudioUrl = "",
                            CorrectAnswerIndex = 2,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(538),
                            DifficultyLevel = 2,
                            Explanation = "x + 5 = 12, so x = 12 - 5 = 7",
                            ImageUrl = "",
                            Options = "[\"5\",\"6\",\"7\",\"8\"]",
                            Points = 20,
                            QuizId = 4,
                            Text = "If x + 5 = 12, what is x?"
                        },
                        new
                        {
                            Id = 11,
                            AudioUrl = "",
                            CorrectAnswerIndex = 2,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(570),
                            DifficultyLevel = 1,
                            Explanation = "144 ÷ 12 = 12",
                            ImageUrl = "",
                            Options = "[\"10\",\"11\",\"12\",\"13\"]",
                            Points = 15,
                            QuizId = 4,
                            Text = "What is 144 ÷ 12?"
                        });
                });

            modelBuilder.Entity("KidsQuiz.Data.Models.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CorrectAnswerIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<double>("SuccessRate")
                        .HasColumnType("float");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetAgeGroup")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("DifficultyLevel");

                    b.HasIndex("IsActive");

                    b.HasIndex("SuccessRate");

                    b.HasIndex("TargetAgeGroup");

                    b.ToTable("QuestionBanks");
                });

            modelBuilder.Entity("KidsQuiz.Data.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsGeneratedByLLM")
                        .HasColumnType("bit");

                    b.Property<string>("LLMPrompt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Labels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DifficultyLevel");

                    b.HasIndex("Rating");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Basic arithmetic operations for young learners",
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 551, DateTimeKind.Utc).AddTicks(9971),
                            Description = "A fun quiz to test your basic math skills! Perfect for kids in grades 1-3.",
                            DifficultyLevel = 0,
                            EstimatedDurationMinutes = 10,
                            IsGeneratedByLLM = false,
                            LLMPrompt = "",
                            Labels = "[\"math\",\"arithmetic\",\"beginner\",\"early-elementary\"]",
                            Rating = 0.0,
                            RatingCount = 0,
                            Title = "Fun Math Quiz for Early Elementary"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Basic science concepts for curious minds",
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(168),
                            Description = "Test your knowledge about the world around us! Perfect for curious young minds.",
                            DifficultyLevel = 1,
                            EstimatedDurationMinutes = 15,
                            IsGeneratedByLLM = false,
                            LLMPrompt = "",
                            Labels = "[\"science\",\"nature\",\"facts\",\"early-elementary\"]",
                            Rating = 0.0,
                            RatingCount = 0,
                            Title = "Amazing Science Facts for Kids"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Basic English language skills for young learners",
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(236),
                            Description = "Learn and practice basic English vocabulary and grammar!",
                            DifficultyLevel = 0,
                            EstimatedDurationMinutes = 12,
                            IsGeneratedByLLM = false,
                            LLMPrompt = "",
                            Labels = "[\"english\",\"vocabulary\",\"grammar\",\"early-elementary\"]",
                            Rating = 0.0,
                            RatingCount = 0,
                            Title = "Fun with English Words"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Advanced arithmetic and basic algebra for grades 4-6",
                            CreatedAt = new DateTime(2025, 6, 17, 11, 19, 36, 552, DateTimeKind.Utc).AddTicks(486),
                            Description = "Test your math skills with these challenging problems!",
                            DifficultyLevel = 2,
                            EstimatedDurationMinutes = 20,
                            IsGeneratedByLLM = false,
                            LLMPrompt = "",
                            Labels = "[\"math\",\"arithmetic\",\"algebra\",\"late-elementary\"]",
                            Rating = 0.0,
                            RatingCount = 0,
                            Title = "Math Challenge for Late Elementary"
                        });
                });

            modelBuilder.Entity("KidsQuiz.Data.Models.QuizSolvingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("KidId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeTakenInSeconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizSolvingRecords");
                });

            modelBuilder.Entity("KidsQuiz.Data.Models.Question", b =>
                {
                    b.HasOne("KidsQuiz.Data.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("KidsQuiz.Data.Models.QuizSolvingRecord", b =>
                {
                    b.HasOne("KidsQuiz.Data.Models.Kid", "Kid")
                        .WithMany("QuizSolvingRecords")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KidsQuiz.Data.Models.Quiz", "Quiz")
                        .WithMany("QuizSolvingRecords")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("KidsQuiz.Data.Models.Kid", b =>
                {
                    b.Navigation("QuizSolvingRecords");
                });

            modelBuilder.Entity("KidsQuiz.Data.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizSolvingRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
